//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WpfKolekcjaZdjec.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AdditionalAttribute))]
    [KnownType(typeof(Photo))]
    [KnownType(typeof(ExifAttribute))]
    public partial class Attribute: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Author
        {
            get { return _author; }
            set
            {
                if (_author != value)
                {
                    _author = value;
                    OnPropertyChanged("Author");
                }
            }
        }
        private string _author;
    
        [DataMember]
        public short BitsPerPixel
        {
            get { return _bitsPerPixel; }
            set
            {
                if (_bitsPerPixel != value)
                {
                    _bitsPerPixel = value;
                    OnPropertyChanged("BitsPerPixel");
                }
            }
        }
        private short _bitsPerPixel;
    
        [DataMember]
        public string Hash
        {
            get { return _hash; }
            set
            {
                if (_hash != value)
                {
                    _hash = value;
                    OnPropertyChanged("Hash");
                }
            }
        }
        private string _hash;
    
        [DataMember]
        public int Height
        {
            get { return _height; }
            set
            {
                if (_height != value)
                {
                    _height = value;
                    OnPropertyChanged("Height");
                }
            }
        }
        private int _height;
    
        [DataMember]
        public int Width
        {
            get { return _width; }
            set
            {
                if (_width != value)
                {
                    _width = value;
                    OnPropertyChanged("Width");
                }
            }
        }
        private int _width;
    
        [DataMember]
        public int Rate
        {
            get { return _rate; }
            set
            {
                if (_rate != value)
                {
                    _rate = value;
                    OnPropertyChanged("Rate");
                }
            }
        }
        private int _rate;
    
        [DataMember]
        public bool AreExifAttributesPossible
        {
            get { return _areExifAttributesPossible; }
            set
            {
                if (_areExifAttributesPossible != value)
                {
                    _areExifAttributesPossible = value;
                    OnPropertyChanged("AreExifAttributesPossible");
                }
            }
        }
        private bool _areExifAttributesPossible;
    
        [DataMember]
        public Nullable<int> AdditionalAttributesID
        {
            get { return _additionalAttributesID; }
            set
            {
                if (_additionalAttributesID != value)
                {
                    ChangeTracker.RecordOriginalValue("AdditionalAttributesID", _additionalAttributesID);
                    if (!IsDeserializing)
                    {
                        if (AdditionalAttribute != null && AdditionalAttribute.ID != value)
                        {
                            AdditionalAttribute = null;
                        }
                    }
                    _additionalAttributesID = value;
                    OnPropertyChanged("AdditionalAttributesID");
                }
            }
        }
        private Nullable<int> _additionalAttributesID;
    
        [DataMember]
        public Nullable<int> ExifAttributesID
        {
            get { return _exifAttributesID; }
            set
            {
                if (_exifAttributesID != value)
                {
                    ChangeTracker.RecordOriginalValue("ExifAttributesID", _exifAttributesID);
                    if (!IsDeserializing)
                    {
                        if (ExifAttribute != null && ExifAttribute.ID != value)
                        {
                            ExifAttribute = null;
                        }
                    }
                    _exifAttributesID = value;
                    OnPropertyChanged("ExifAttributesID");
                }
            }
        }
        private Nullable<int> _exifAttributesID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public AdditionalAttribute AdditionalAttribute
        {
            get { return _additionalAttribute; }
            set
            {
                if (!ReferenceEquals(_additionalAttribute, value))
                {
                    var previousValue = _additionalAttribute;
                    _additionalAttribute = value;
                    FixupAdditionalAttribute(previousValue);
                    OnNavigationPropertyChanged("AdditionalAttribute");
                }
            }
        }
        private AdditionalAttribute _additionalAttribute;
    
        [DataMember]
        public TrackableCollection<Photo> Photos
        {
            get
            {
                if (_photos == null)
                {
                    _photos = new TrackableCollection<Photo>();
                    _photos.CollectionChanged += FixupPhotos;
                }
                return _photos;
            }
            set
            {
                if (!ReferenceEquals(_photos, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_photos != null)
                    {
                        _photos.CollectionChanged -= FixupPhotos;
                    }
                    _photos = value;
                    if (_photos != null)
                    {
                        _photos.CollectionChanged += FixupPhotos;
                    }
                    OnNavigationPropertyChanged("Photos");
                }
            }
        }
        private TrackableCollection<Photo> _photos;
    
        [DataMember]
        public ExifAttribute ExifAttribute
        {
            get { return _exifAttribute; }
            set
            {
                if (!ReferenceEquals(_exifAttribute, value))
                {
                    var previousValue = _exifAttribute;
                    _exifAttribute = value;
                    FixupExifAttribute(previousValue);
                    OnNavigationPropertyChanged("ExifAttribute");
                }
            }
        }
        private ExifAttribute _exifAttribute;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AdditionalAttribute = null;
            Photos.Clear();
            ExifAttribute = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupAdditionalAttribute(AdditionalAttribute previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Attributes.Contains(this))
            {
                previousValue.Attributes.Remove(this);
            }
    
            if (AdditionalAttribute != null)
            {
                if (!AdditionalAttribute.Attributes.Contains(this))
                {
                    AdditionalAttribute.Attributes.Add(this);
                }
    
                AdditionalAttributesID = AdditionalAttribute.ID;
            }
            else if (!skipKeys)
            {
                AdditionalAttributesID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AdditionalAttribute")
                    && (ChangeTracker.OriginalValues["AdditionalAttribute"] == AdditionalAttribute))
                {
                    ChangeTracker.OriginalValues.Remove("AdditionalAttribute");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AdditionalAttribute", previousValue);
                }
                if (AdditionalAttribute != null && !AdditionalAttribute.ChangeTracker.ChangeTrackingEnabled)
                {
                    AdditionalAttribute.StartTracking();
                }
            }
        }
    
        private void FixupExifAttribute(ExifAttribute previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Attributes.Contains(this))
            {
                previousValue.Attributes.Remove(this);
            }
    
            if (ExifAttribute != null)
            {
                if (!ExifAttribute.Attributes.Contains(this))
                {
                    ExifAttribute.Attributes.Add(this);
                }
    
                ExifAttributesID = ExifAttribute.ID;
            }
            else if (!skipKeys)
            {
                ExifAttributesID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExifAttribute")
                    && (ChangeTracker.OriginalValues["ExifAttribute"] == ExifAttribute))
                {
                    ChangeTracker.OriginalValues.Remove("ExifAttribute");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExifAttribute", previousValue);
                }
                if (ExifAttribute != null && !ExifAttribute.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExifAttribute.StartTracking();
                }
            }
        }
    
        private void FixupPhotos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Photo item in e.NewItems)
                {
                    item.Attribute = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Photos", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Photo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attribute, this))
                    {
                        item.Attribute = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Photos", item);
                    }
                }
            }
        }

        #endregion
    }
}
