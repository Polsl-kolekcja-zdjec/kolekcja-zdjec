//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WpfKolekcjaZdjec.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Tag))]
    [KnownType(typeof(Photo))]
    public partial class Tag: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string IconPath
        {
            get { return _iconPath; }
            set
            {
                if (_iconPath != value)
                {
                    _iconPath = value;
                    OnPropertyChanged("IconPath");
                }
            }
        }
        private string _iconPath;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Tag> Tag_SubTags_Hierarchy
        {
            get
            {
                if (_tag_SubTags_Hierarchy == null)
                {
                    _tag_SubTags_Hierarchy = new TrackableCollection<Tag>();
                    _tag_SubTags_Hierarchy.CollectionChanged += FixupTag_SubTags_Hierarchy;
                }
                return _tag_SubTags_Hierarchy;
            }
            set
            {
                if (!ReferenceEquals(_tag_SubTags_Hierarchy, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tag_SubTags_Hierarchy != null)
                    {
                        _tag_SubTags_Hierarchy.CollectionChanged -= FixupTag_SubTags_Hierarchy;
                    }
                    _tag_SubTags_Hierarchy = value;
                    if (_tag_SubTags_Hierarchy != null)
                    {
                        _tag_SubTags_Hierarchy.CollectionChanged += FixupTag_SubTags_Hierarchy;
                    }
                    OnNavigationPropertyChanged("Tag_SubTags_Hierarchy");
                }
            }
        }
        private TrackableCollection<Tag> _tag_SubTags_Hierarchy;
    
        [DataMember]
        public Tag Tag_ParentTag_Hierarchy
        {
            get { return _tag_ParentTag_Hierarchy; }
            set
            {
                if (!ReferenceEquals(_tag_ParentTag_Hierarchy, value))
                {
                    var previousValue = _tag_ParentTag_Hierarchy;
                    _tag_ParentTag_Hierarchy = value;
                    FixupTag_ParentTag_Hierarchy(previousValue);
                    OnNavigationPropertyChanged("Tag_ParentTag_Hierarchy");
                }
            }
        }
        private Tag _tag_ParentTag_Hierarchy;
    
        [DataMember]
        public TrackableCollection<Photo> Photo
        {
            get
            {
                if (_photo == null)
                {
                    _photo = new TrackableCollection<Photo>();
                    _photo.CollectionChanged += FixupPhoto;
                }
                return _photo;
            }
            set
            {
                if (!ReferenceEquals(_photo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_photo != null)
                    {
                        _photo.CollectionChanged -= FixupPhoto;
                    }
                    _photo = value;
                    if (_photo != null)
                    {
                        _photo.CollectionChanged += FixupPhoto;
                    }
                    OnNavigationPropertyChanged("Photo");
                }
            }
        }
        private TrackableCollection<Photo> _photo;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Tag_SubTags_Hierarchy.Clear();
            Tag_ParentTag_Hierarchy = null;
            FixupTag_ParentTag_HierarchyKeys();
            Photo.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupTag_ParentTag_Hierarchy(Tag previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tag_SubTags_Hierarchy.Contains(this))
            {
                previousValue.Tag_SubTags_Hierarchy.Remove(this);
            }
    
            if (Tag_ParentTag_Hierarchy != null)
            {
                if (!Tag_ParentTag_Hierarchy.Tag_SubTags_Hierarchy.Contains(this))
                {
                    Tag_ParentTag_Hierarchy.Tag_SubTags_Hierarchy.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tag_ParentTag_Hierarchy")
                    && (ChangeTracker.OriginalValues["Tag_ParentTag_Hierarchy"] == Tag_ParentTag_Hierarchy))
                {
                    ChangeTracker.OriginalValues.Remove("Tag_ParentTag_Hierarchy");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tag_ParentTag_Hierarchy", previousValue);
                }
                if (Tag_ParentTag_Hierarchy != null && !Tag_ParentTag_Hierarchy.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tag_ParentTag_Hierarchy.StartTracking();
                }
                FixupTag_ParentTag_HierarchyKeys();
            }
        }
    
        private void FixupTag_ParentTag_HierarchyKeys()
        {
            const string IdKeyName = "Tag_ParentTag_Hierarchy.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Tag_ParentTag_Hierarchy == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Tag_ParentTag_Hierarchy.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupTag_SubTags_Hierarchy(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Tag item in e.NewItems)
                {
                    item.Tag_ParentTag_Hierarchy = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tag_SubTags_Hierarchy", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tag item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tag_ParentTag_Hierarchy, this))
                    {
                        item.Tag_ParentTag_Hierarchy = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tag_SubTags_Hierarchy", item);
                    }
                }
            }
        }
    
        private void FixupPhoto(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Photo item in e.NewItems)
                {
                    item.Tag = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Photo", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Photo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tag, this))
                    {
                        item.Tag = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Photo", item);
                    }
                }
            }
        }

        #endregion
    }
}
