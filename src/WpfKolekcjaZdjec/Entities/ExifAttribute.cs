//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WpfKolekcjaZdjec.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Attribute))]
    public partial class ExifAttribute: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string AdditionalParametersXML
        {
            get { return _additionalParametersXML; }
            set
            {
                if (_additionalParametersXML != value)
                {
                    _additionalParametersXML = value;
                    OnPropertyChanged("AdditionalParametersXML");
                }
            }
        }
        private string _additionalParametersXML;
    
        [DataMember]
        public string CameraModel
        {
            get { return _cameraModel; }
            set
            {
                if (_cameraModel != value)
                {
                    _cameraModel = value;
                    OnPropertyChanged("CameraModel");
                }
            }
        }
        private string _cameraModel;
    
        [DataMember]
        public string CameraName
        {
            get { return _cameraName; }
            set
            {
                if (_cameraName != value)
                {
                    _cameraName = value;
                    OnPropertyChanged("CameraName");
                }
            }
        }
        private string _cameraName;
    
        [DataMember]
        public double Aperture
        {
            get { return _aperture; }
            set
            {
                if (_aperture != value)
                {
                    _aperture = value;
                    OnPropertyChanged("Aperture");
                }
            }
        }
        private double _aperture;
    
        [DataMember]
        public double Shutter
        {
            get { return _shutter; }
            set
            {
                if (_shutter != value)
                {
                    _shutter = value;
                    OnPropertyChanged("Shutter");
                }
            }
        }
        private double _shutter;
    
        [DataMember]
        public long ISO
        {
            get { return _iSO; }
            set
            {
                if (_iSO != value)
                {
                    _iSO = value;
                    OnPropertyChanged("ISO");
                }
            }
        }
        private long _iSO;
    
        [DataMember]
        public long ExposureBias
        {
            get { return _exposureBias; }
            set
            {
                if (_exposureBias != value)
                {
                    _exposureBias = value;
                    OnPropertyChanged("ExposureBias");
                }
            }
        }
        private long _exposureBias;
    
        [DataMember]
        public long FocalLength
        {
            get { return _focalLength; }
            set
            {
                if (_focalLength != value)
                {
                    _focalLength = value;
                    OnPropertyChanged("FocalLength");
                }
            }
        }
        private long _focalLength;
    
        [DataMember]
        public string MeteringMode
        {
            get { return _meteringMode; }
            set
            {
                if (_meteringMode != value)
                {
                    _meteringMode = value;
                    OnPropertyChanged("MeteringMode");
                }
            }
        }
        private string _meteringMode;
    
        [DataMember]
        public string SubjectDistance
        {
            get { return _subjectDistance; }
            set
            {
                if (_subjectDistance != value)
                {
                    _subjectDistance = value;
                    OnPropertyChanged("SubjectDistance");
                }
            }
        }
        private string _subjectDistance;
    
        [DataMember]
        public string FlashMode
        {
            get { return _flashMode; }
            set
            {
                if (_flashMode != value)
                {
                    _flashMode = value;
                    OnPropertyChanged("FlashMode");
                }
            }
        }
        private string _flashMode;
    
        [DataMember]
        public string FlashEnergy
        {
            get { return _flashEnergy; }
            set
            {
                if (_flashEnergy != value)
                {
                    _flashEnergy = value;
                    OnPropertyChanged("FlashEnergy");
                }
            }
        }
        private string _flashEnergy;
    
        [DataMember]
        public long mm35FocalLength
        {
            get { return _mm35FocalLength; }
            set
            {
                if (_mm35FocalLength != value)
                {
                    _mm35FocalLength = value;
                    OnPropertyChanged("mm35FocalLength");
                }
            }
        }
        private long _mm35FocalLength;
    
        [DataMember]
        public string WhiteBalance
        {
            get { return _whiteBalance; }
            set
            {
                if (_whiteBalance != value)
                {
                    _whiteBalance = value;
                    OnPropertyChanged("WhiteBalance");
                }
            }
        }
        private string _whiteBalance;
    
        [DataMember]
        public string ExposureProgram
        {
            get { return _exposureProgram; }
            set
            {
                if (_exposureProgram != value)
                {
                    _exposureProgram = value;
                    OnPropertyChanged("ExposureProgram");
                }
            }
        }
        private string _exposureProgram;
    
        [DataMember]
        public string LensMarker
        {
            get { return _lensMarker; }
            set
            {
                if (_lensMarker != value)
                {
                    _lensMarker = value;
                    OnPropertyChanged("LensMarker");
                }
            }
        }
        private string _lensMarker;
    
        [DataMember]
        public string LensModel
        {
            get { return _lensModel; }
            set
            {
                if (_lensModel != value)
                {
                    _lensModel = value;
                    OnPropertyChanged("LensModel");
                }
            }
        }
        private string _lensModel;
    
        [DataMember]
        public string FlashMarker
        {
            get { return _flashMarker; }
            set
            {
                if (_flashMarker != value)
                {
                    _flashMarker = value;
                    OnPropertyChanged("FlashMarker");
                }
            }
        }
        private string _flashMarker;
    
        [DataMember]
        public string FlashModel
        {
            get { return _flashModel; }
            set
            {
                if (_flashModel != value)
                {
                    _flashModel = value;
                    OnPropertyChanged("FlashModel");
                }
            }
        }
        private string _flashModel;
    
        [DataMember]
        public string LightSource
        {
            get { return _lightSource; }
            set
            {
                if (_lightSource != value)
                {
                    _lightSource = value;
                    OnPropertyChanged("LightSource");
                }
            }
        }
        private string _lightSource;
    
        [DataMember]
        public string CameraSerialNumber
        {
            get { return _cameraSerialNumber; }
            set
            {
                if (_cameraSerialNumber != value)
                {
                    _cameraSerialNumber = value;
                    OnPropertyChanged("CameraSerialNumber");
                }
            }
        }
        private string _cameraSerialNumber;
    
        [DataMember]
        public string Contrast
        {
            get { return _contrast; }
            set
            {
                if (_contrast != value)
                {
                    _contrast = value;
                    OnPropertyChanged("Contrast");
                }
            }
        }
        private string _contrast;
    
        [DataMember]
        public string Brightness
        {
            get { return _brightness; }
            set
            {
                if (_brightness != value)
                {
                    _brightness = value;
                    OnPropertyChanged("Brightness");
                }
            }
        }
        private string _brightness;
    
        [DataMember]
        public string Saturation
        {
            get { return _saturation; }
            set
            {
                if (_saturation != value)
                {
                    _saturation = value;
                    OnPropertyChanged("Saturation");
                }
            }
        }
        private string _saturation;
    
        [DataMember]
        public string Sharpness
        {
            get { return _sharpness; }
            set
            {
                if (_sharpness != value)
                {
                    _sharpness = value;
                    OnPropertyChanged("Sharpness");
                }
            }
        }
        private string _sharpness;
    
        [DataMember]
        public long DigitalZoom
        {
            get { return _digitalZoom; }
            set
            {
                if (_digitalZoom != value)
                {
                    _digitalZoom = value;
                    OnPropertyChanged("DigitalZoom");
                }
            }
        }
        private long _digitalZoom;
    
        [DataMember]
        public long ExifVersion
        {
            get { return _exifVersion; }
            set
            {
                if (_exifVersion != value)
                {
                    _exifVersion = value;
                    OnPropertyChanged("ExifVersion");
                }
            }
        }
        private long _exifVersion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Attribute> Attributes
        {
            get
            {
                if (_attributes == null)
                {
                    _attributes = new TrackableCollection<Attribute>();
                    _attributes.CollectionChanged += FixupAttributes;
                }
                return _attributes;
            }
            set
            {
                if (!ReferenceEquals(_attributes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attributes != null)
                    {
                        _attributes.CollectionChanged -= FixupAttributes;
                    }
                    _attributes = value;
                    if (_attributes != null)
                    {
                        _attributes.CollectionChanged += FixupAttributes;
                    }
                    OnNavigationPropertyChanged("Attributes");
                }
            }
        }
        private TrackableCollection<Attribute> _attributes;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Attributes.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupAttributes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Attribute item in e.NewItems)
                {
                    item.ExifAttribute = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Attributes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attribute item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExifAttribute, this))
                    {
                        item.ExifAttribute = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Attributes", item);
                    }
                }
            }
        }

        #endregion
    }
}
