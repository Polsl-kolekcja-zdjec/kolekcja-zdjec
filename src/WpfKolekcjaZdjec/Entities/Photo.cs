//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WpfKolekcjaZdjec.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Tag))]
    [KnownType(typeof(Archive))]
    [KnownType(typeof(BaseAttributes))]
    public partial class Photo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public byte[] Filename
        {
            get { return _filename; }
            set
            {
                if (_filename != value)
                {
                    _filename = value;
                    OnPropertyChanged("Filename");
                }
            }
        }
        private byte[] _filename;
    
        [DataMember]
        public string FilePath
        {
            get { return _filePath; }
            set
            {
                if (_filePath != value)
                {
                    _filePath = value;
                    OnPropertyChanged("FilePath");
                }
            }
        }
        private string _filePath;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public byte[] ThumbnailPath
        {
            get { return _thumbnailPath; }
            set
            {
                if (_thumbnailPath != value)
                {
                    _thumbnailPath = value;
                    OnPropertyChanged("ThumbnailPath");
                }
            }
        }
        private byte[] _thumbnailPath;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Tag Tag
        {
            get { return _tag; }
            set
            {
                if (!ReferenceEquals(_tag, value))
                {
                    var previousValue = _tag;
                    _tag = value;
                    FixupTag(previousValue);
                    OnNavigationPropertyChanged("Tag");
                }
            }
        }
        private Tag _tag;
    
        [DataMember]
        public TrackableCollection<Archive> Source
        {
            get
            {
                if (_source == null)
                {
                    _source = new TrackableCollection<Archive>();
                    _source.CollectionChanged += FixupSource;
                }
                return _source;
            }
            set
            {
                if (!ReferenceEquals(_source, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_source != null)
                    {
                        _source.CollectionChanged -= FixupSource;
                    }
                    _source = value;
                    if (_source != null)
                    {
                        _source.CollectionChanged += FixupSource;
                    }
                    OnNavigationPropertyChanged("Source");
                }
            }
        }
        private TrackableCollection<Archive> _source;
    
        [DataMember]
        public Archive Archives
        {
            get { return _archives; }
            set
            {
                if (!ReferenceEquals(_archives, value))
                {
                    var previousValue = _archives;
                    _archives = value;
                    FixupArchives(previousValue);
                    OnNavigationPropertyChanged("Archives");
                }
            }
        }
        private Archive _archives;
    
        [DataMember]
        public BaseAttributes Attributes
        {
            get { return _attributes; }
            set
            {
                if (!ReferenceEquals(_attributes, value))
                {
                    var previousValue = _attributes;
                    _attributes = value;
                    FixupAttributes(previousValue);
                    OnNavigationPropertyChanged("Attributes");
                }
            }
        }
        private BaseAttributes _attributes;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Tag = null;
            FixupTagKeys();
            Source.Clear();
            Archives = null;
            FixupArchivesKeys();
            Attributes = null;
            FixupAttributesKeys();
        }

        #endregion
        #region Association Fixup
    
        private void FixupTag(Tag previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Photo.Contains(this))
            {
                previousValue.Photo.Remove(this);
            }
    
            if (Tag != null)
            {
                if (!Tag.Photo.Contains(this))
                {
                    Tag.Photo.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tag")
                    && (ChangeTracker.OriginalValues["Tag"] == Tag))
                {
                    ChangeTracker.OriginalValues.Remove("Tag");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tag", previousValue);
                }
                if (Tag != null && !Tag.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tag.StartTracking();
                }
                FixupTagKeys();
            }
        }
    
        private void FixupTagKeys()
        {
            const string IdKeyName = "Tag.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Tag == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Tag.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupArchives(Archive previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Photo_1.Contains(this))
            {
                previousValue.Photo_1.Remove(this);
            }
    
            if (Archives != null)
            {
                if (!Archives.Photo_1.Contains(this))
                {
                    Archives.Photo_1.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Archives")
                    && (ChangeTracker.OriginalValues["Archives"] == Archives))
                {
                    ChangeTracker.OriginalValues.Remove("Archives");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Archives", previousValue);
                }
                if (Archives != null && !Archives.ChangeTracker.ChangeTrackingEnabled)
                {
                    Archives.StartTracking();
                }
                FixupArchivesKeys();
            }
        }
    
        private void FixupArchivesKeys()
        {
            const string IdKeyName = "Archives.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Archives == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Archives.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupAttributes(BaseAttributes previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Photo.Contains(this))
            {
                previousValue.Photo.Remove(this);
            }
    
            if (Attributes != null)
            {
                if (!Attributes.Photo.Contains(this))
                {
                    Attributes.Photo.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Attributes")
                    && (ChangeTracker.OriginalValues["Attributes"] == Attributes))
                {
                    ChangeTracker.OriginalValues.Remove("Attributes");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Attributes", previousValue);
                }
                if (Attributes != null && !Attributes.ChangeTracker.ChangeTrackingEnabled)
                {
                    Attributes.StartTracking();
                }
                FixupAttributesKeys();
            }
        }
    
        private void FixupAttributesKeys()
        {
            const string IdKeyName = "Attributes.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Attributes == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Attributes.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupSource(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Archive item in e.NewItems)
                {
                    item.Photo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Source", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Archive item in e.OldItems)
                {
                    if (ReferenceEquals(item.Photo, this))
                    {
                        item.Photo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Source", item);
                    }
                }
            }
        }

        #endregion
    }
}
