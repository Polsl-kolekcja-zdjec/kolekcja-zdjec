//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WpfKolekcjaZdjec.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Archive))]
    [KnownType(typeof(Attribute))]
    [KnownType(typeof(Tags2Photos))]
    [KnownType(typeof(Photos2Locations))]
    public partial class Photo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties

        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string FilePath
        {
            get { return _filePath; }
            set
            {
                if (_filePath != value)
                {
                    _filePath = value;
                    OnPropertyChanged("FilePath");
                }
            }
        }
        private string _filePath;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string ThumbnailPath
        {
            get { return _thumbnailPath; }
            set
            {
                if (_thumbnailPath != value)
                {
                    _thumbnailPath = value;
                    OnPropertyChanged("ThumbnailPath");
                }
            }
        }
        private string _thumbnailPath;
    
        [DataMember]
        public Nullable<int> SourceID
        {
            get { return _sourceID; }
            set
            {
                if (_sourceID != value)
                {
                    ChangeTracker.RecordOriginalValue("SourceID", _sourceID);
                    if (!IsDeserializing)
                    {
                        if (Archive != null && Archive.ID != value)
                        {
                            Archive = null;
                        }
                    }
                    _sourceID = value;
                    OnPropertyChanged("SourceID");
                }
            }
        }
        private Nullable<int> _sourceID;
    
        [DataMember]
        public Nullable<int> AttributesID
        {
            get { return _attributesID; }
            set
            {
                if (_attributesID != value)
                {
                    ChangeTracker.RecordOriginalValue("AttributesID", _attributesID);
                    if (!IsDeserializing)
                    {
                        if (Attribute != null && Attribute.ID != value)
                        {
                            Attribute = null;
                        }
                    }
                    _attributesID = value;
                    OnPropertyChanged("AttributesID");
                }
            }
        }
        private Nullable<int> _attributesID;
    
        [DataMember]
        public System.DateTime Date
        {
            get { return _date; }
            set
            {
                if (_date != value)
                {
                    _date = value;
                    OnPropertyChanged("Date");
                }
            }
        }
        private System.DateTime _date;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Archive Archive
        {
            get { return _archive; }
            set
            {
                if (!ReferenceEquals(_archive, value))
                {
                    var previousValue = _archive;
                    _archive = value;
                    FixupArchive(previousValue);
                    OnNavigationPropertyChanged("Archive");
                }
            }
        }
        private Archive _archive;
    
        [DataMember]
        public Attribute Attribute
        {
            get { return _attribute; }
            set
            {
                if (!ReferenceEquals(_attribute, value))
                {
                    var previousValue = _attribute;
                    _attribute = value;
                    FixupAttribute(previousValue);
                    OnNavigationPropertyChanged("Attribute");
                }
            }
        }
        private Attribute _attribute;
    
        [DataMember]
        public TrackableCollection<Tags2Photos> Tags2Photos
        {
            get
            {
                if (_tags2Photos == null)
                {
                    _tags2Photos = new TrackableCollection<Tags2Photos>();
                    _tags2Photos.CollectionChanged += FixupTags2Photos;
                }
                return _tags2Photos;
            }
            set
            {
                if (!ReferenceEquals(_tags2Photos, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tags2Photos != null)
                    {
                        _tags2Photos.CollectionChanged -= FixupTags2Photos;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Tags2Photos item in _tags2Photos)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _tags2Photos = value;
                    if (_tags2Photos != null)
                    {
                        _tags2Photos.CollectionChanged += FixupTags2Photos;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Tags2Photos item in _tags2Photos)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Tags2Photos");
                }
            }
        }
        private TrackableCollection<Tags2Photos> _tags2Photos;
    
        [DataMember]
        public TrackableCollection<Photos2Locations> Photos2Locations
        {
            get
            {
                if (_photos2Locations == null)
                {
                    _photos2Locations = new TrackableCollection<Photos2Locations>();
                    _photos2Locations.CollectionChanged += FixupPhotos2Locations;
                }
                return _photos2Locations;
            }
            set
            {
                if (!ReferenceEquals(_photos2Locations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_photos2Locations != null)
                    {
                        _photos2Locations.CollectionChanged -= FixupPhotos2Locations;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Photos2Locations item in _photos2Locations)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _photos2Locations = value;
                    if (_photos2Locations != null)
                    {
                        _photos2Locations.CollectionChanged += FixupPhotos2Locations;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Photos2Locations item in _photos2Locations)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Photos2Locations");
                }
            }
        }
        private TrackableCollection<Photos2Locations> _photos2Locations;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Archive = null;
            Attribute = null;
            Tags2Photos.Clear();
            Photos2Locations.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupArchive(Archive previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Photos.Contains(this))
            {
                previousValue.Photos.Remove(this);
            }
    
            if (Archive != null)
            {
                if (!Archive.Photos.Contains(this))
                {
                    Archive.Photos.Add(this);
                }
    
                SourceID = Archive.ID;
            }
            else if (!skipKeys)
            {
                SourceID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Archive")
                    && (ChangeTracker.OriginalValues["Archive"] == Archive))
                {
                    ChangeTracker.OriginalValues.Remove("Archive");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Archive", previousValue);
                }
                if (Archive != null && !Archive.ChangeTracker.ChangeTrackingEnabled)
                {
                    Archive.StartTracking();
                }
            }
        }
    
        private void FixupAttribute(Attribute previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Photos.Contains(this))
            {
                previousValue.Photos.Remove(this);
            }
    
            if (Attribute != null)
            {
                if (!Attribute.Photos.Contains(this))
                {
                    Attribute.Photos.Add(this);
                }
    
                AttributesID = Attribute.ID;
            }
            else if (!skipKeys)
            {
                AttributesID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Attribute")
                    && (ChangeTracker.OriginalValues["Attribute"] == Attribute))
                {
                    ChangeTracker.OriginalValues.Remove("Attribute");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Attribute", previousValue);
                }
                if (Attribute != null && !Attribute.ChangeTracker.ChangeTrackingEnabled)
                {
                    Attribute.StartTracking();
                }
            }
        }
    
        private void FixupTags2Photos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Tags2Photos item in e.NewItems)
                {
                    item.Photo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tags2Photos", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tags2Photos item in e.OldItems)
                {
                    if (ReferenceEquals(item.Photo, this))
                    {
                        item.Photo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tags2Photos", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPhotos2Locations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Photos2Locations item in e.NewItems)
                {
                    item.Photo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Photos2Locations", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Photos2Locations item in e.OldItems)
                {
                    if (ReferenceEquals(item.Photo, this))
                    {
                        item.Photo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Photos2Locations", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
