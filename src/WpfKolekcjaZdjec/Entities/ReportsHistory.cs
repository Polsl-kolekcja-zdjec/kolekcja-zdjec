//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace WpfKolekcjaZdjec.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SavedReport))]
    public partial class ReportsHistory: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    OnPropertyChanged("Content");
                }
            }
        }
        private string _content;
    
        [DataMember]
        public System.DateTime LastUseDate
        {
            get { return _lastUseDate; }
            set
            {
                if (_lastUseDate != value)
                {
                    _lastUseDate = value;
                    OnPropertyChanged("LastUseDate");
                }
            }
        }
        private System.DateTime _lastUseDate;
    
        [DataMember]
        public Nullable<int> SavedReportID
        {
            get { return _savedReportID; }
            set
            {
                if (_savedReportID != value)
                {
                    ChangeTracker.RecordOriginalValue("SavedReportID", _savedReportID);
                    if (!IsDeserializing)
                    {
                        if (SavedReport != null && SavedReport.ID != value)
                        {
                            SavedReport = null;
                        }
                    }
                    _savedReportID = value;
                    OnPropertyChanged("SavedReportID");
                }
            }
        }
        private Nullable<int> _savedReportID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public SavedReport SavedReport
        {
            get { return _savedReport; }
            set
            {
                if (!ReferenceEquals(_savedReport, value))
                {
                    var previousValue = _savedReport;
                    _savedReport = value;
                    FixupSavedReport(previousValue);
                    OnNavigationPropertyChanged("SavedReport");
                }
            }
        }
        private SavedReport _savedReport;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SavedReport = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupSavedReport(SavedReport previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ReportsHistories.Contains(this))
            {
                previousValue.ReportsHistories.Remove(this);
            }
    
            if (SavedReport != null)
            {
                if (!SavedReport.ReportsHistories.Contains(this))
                {
                    SavedReport.ReportsHistories.Add(this);
                }
    
                SavedReportID = SavedReport.ID;
            }
            else if (!skipKeys)
            {
                SavedReportID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SavedReport")
                    && (ChangeTracker.OriginalValues["SavedReport"] == SavedReport))
                {
                    ChangeTracker.OriginalValues.Remove("SavedReport");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SavedReport", previousValue);
                }
                if (SavedReport != null && !SavedReport.ChangeTracker.ChangeTrackingEnabled)
                {
                    SavedReport.StartTracking();
                }
            }
        }

        #endregion
    }
}
